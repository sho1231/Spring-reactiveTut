
https://www.youtube.com/watch?v=y3ySZkSgWik

1) Aysnc and non-blocking
    1) Once thread will receive a request it will not wait for the response and will send the
    request to thread pool for it to process, and it will continue to take other request.

Publisher ---> one who generates the data.
Subscriber ---> one who consumes the data and does some processing.
2) Workflow:
    1) First subscriber will subscribe to the publisher.
    2) Publisher will acknowledge and return back a subscription
    3) Subscriber will request data and will also mention how much data they want
    4) Publisher will send the data to the subscriber , the number of data sent will be equal to the number of times
    onNext() method will be executed
    5) Once the data is sent successfully, onComplete() method will be executed else onError() method will be executed.

3) Types of Publishers:
    1) Mono: For publishing 1 element or no element.
    2) Flux: For publishing multiple elements.


4) Map and FlatMap:
map --> will operate on each element synchronously and will return the transformed element
flatmap --> will operate on each element asynchronously and so it will return mono. Also why mono because it's
operating at a time asynchronously on one data. Also why a publisher the reason being is for async operation.

5) Skip:
it will skip n elements from the first and will emit rest. If n is more than the no. of elements it will emit nothing
skipUntil --> it will start emitting elements from the moment the condition becomes true.
note: doesn't matter if conditions becomes false later
skipWhile --> it will start emitting elements once the condition becomes false.
6) delayElements : it will emit data after n seconds

piece of code:
Flux<String> flux = Flux.just("Hello, World!", "Hi Shourja", "Hello", "ahdhasd", "asdsad")
             .delayElements(Duration.ofSeconds(1)); // Each element will be emitted after a 1-second delay
return flux.skip(Duration.ofMillis(2020)); // Elements emitted within the first 2 seconds and 20 milliseconds will be ignored



7) concat --> It start processing flux in a sequential way.
8) merge ---> It starts processing all the flux at the same time.
9) zip --> It starts processing flux in a way let say there are 3 flux , then it will process the 1st element from
the 1st flux, 1st element from the 2nd flux and 1st element from the third flux and it will combine and give result.
If any of publisher has completed emitting element, then other will also stop.

10) collectList --> will return items from flux in a list with type as mono. Mono<List>

11) block --> will return the items as list of elements and it's blocking and synchronous. Not recommended to use.

12) buffer --> it will emit element at a time based on mentioned number or duration

13) doOnEach --> with this method we can do something based on signal, like do something based on onNext() , onSubscribe()
something like that

14) doOnNext --> with this method we can do something when onNext signal will be executed

15) blockLast() --> same experience as Thread.sleep() and subscribe()

15) doOnCancel --> with this method we can cancel a subscription since we might have some time constraint and
can't process all entities from flux

16) onErrorContinue --> This method will continue on processing other elements even if some exception occurred while processing
some elements

17) onErrorReturn --> This method would stop processing of the flux if some exception occurs and will return a special value,
a special value set by us. We can also return values based on the type of exception.

18) onErrorResume --> This method will start processing a new publisher (Mono/Flux) in case exception happens

19) onErrorMap --> This method map a specific exception to another exception

20) backPressure --> two ways are there: either we can drop request when subscriber cannot handle incoming request
                    or we can store the extra requests in a buffer and those will be emitted accordingly.
                    The 2nd way can also lead to data loss since in some case the buffer might be overflown
                    so we have drop either the oldest or latest request from the buffer

mongodb+srv://sho121:RpEARZfqwuFwxsBz@cluster0-shard-00-00.vxuzi.mongodb.net/?ssl=true&replicaSet=atlas-rtz9yp-shard-0&authSource=admin&retryWrites=true&w=majority&appName=Cluster0

